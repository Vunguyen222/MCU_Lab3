
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b58  08002b58  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b58  08002b58  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b58  08002b58  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  2000001c  08002b7c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08002b7c  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098a4  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5a  00000000  00000000  000298e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c5d  00000000  00000000  0002c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b989  00000000  00000000  00043505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823eb  00000000  00000000  0004ee8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1279  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  000d12cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b1c 	.word	0x08002b1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002b1c 	.word	0x08002b1c

0800014c <display7SEG>:
 */
#include "Ouput.h"

int buffer7SEG[4];

void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 819e 	bhi.w	8000498 <display7SEG+0x34c>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001db 	.word	0x080001db
 800016c:	08000229 	.word	0x08000229
 8000170:	08000277 	.word	0x08000277
 8000174:	080002c5 	.word	0x080002c5
 8000178:	08000313 	.word	0x08000313
 800017c:	08000361 	.word	0x08000361
 8000180:	080003af 	.word	0x080003af
 8000184:	080003fd 	.word	0x080003fd
 8000188:	0800044b 	.word	0x0800044b
	switch(num){
		case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2110      	movs	r1, #16
 8000190:	48c4      	ldr	r0, [pc, #784]	; (80004a4 <display7SEG+0x358>)
 8000192:	f001 fca2 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2120      	movs	r1, #32
 800019a:	48c2      	ldr	r0, [pc, #776]	; (80004a4 <display7SEG+0x358>)
 800019c:	f001 fc9d 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2140      	movs	r1, #64	; 0x40
 80001a4:	48bf      	ldr	r0, [pc, #764]	; (80004a4 <display7SEG+0x358>)
 80001a6:	f001 fc98 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2180      	movs	r1, #128	; 0x80
 80001ae:	48bd      	ldr	r0, [pc, #756]	; (80004a4 <display7SEG+0x358>)
 80001b0:	f001 fc93 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ba:	48ba      	ldr	r0, [pc, #744]	; (80004a4 <display7SEG+0x358>)
 80001bc:	f001 fc8d 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c6:	48b7      	ldr	r0, [pc, #732]	; (80004a4 <display7SEG+0x358>)
 80001c8:	f001 fc87 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d2:	48b4      	ldr	r0, [pc, #720]	; (80004a4 <display7SEG+0x358>)
 80001d4:	f001 fc81 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 80001d8:	e15f      	b.n	800049a <display7SEG+0x34e>
		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	2110      	movs	r1, #16
 80001de:	48b1      	ldr	r0, [pc, #708]	; (80004a4 <display7SEG+0x358>)
 80001e0:	f001 fc7b 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2120      	movs	r1, #32
 80001e8:	48ae      	ldr	r0, [pc, #696]	; (80004a4 <display7SEG+0x358>)
 80001ea:	f001 fc76 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	48ac      	ldr	r0, [pc, #688]	; (80004a4 <display7SEG+0x358>)
 80001f4:	f001 fc71 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	48a9      	ldr	r0, [pc, #676]	; (80004a4 <display7SEG+0x358>)
 80001fe:	f001 fc6c 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000202:	2201      	movs	r2, #1
 8000204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000208:	48a6      	ldr	r0, [pc, #664]	; (80004a4 <display7SEG+0x358>)
 800020a:	f001 fc66 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000214:	48a3      	ldr	r0, [pc, #652]	; (80004a4 <display7SEG+0x358>)
 8000216:	f001 fc60 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	48a0      	ldr	r0, [pc, #640]	; (80004a4 <display7SEG+0x358>)
 8000222:	f001 fc5a 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 8000226:	e138      	b.n	800049a <display7SEG+0x34e>
		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2110      	movs	r1, #16
 800022c:	489d      	ldr	r0, [pc, #628]	; (80004a4 <display7SEG+0x358>)
 800022e:	f001 fc54 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	2120      	movs	r1, #32
 8000236:	489b      	ldr	r0, [pc, #620]	; (80004a4 <display7SEG+0x358>)
 8000238:	f001 fc4f 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2140      	movs	r1, #64	; 0x40
 8000240:	4898      	ldr	r0, [pc, #608]	; (80004a4 <display7SEG+0x358>)
 8000242:	f001 fc4a 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	4896      	ldr	r0, [pc, #600]	; (80004a4 <display7SEG+0x358>)
 800024c:	f001 fc45 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000256:	4893      	ldr	r0, [pc, #588]	; (80004a4 <display7SEG+0x358>)
 8000258:	f001 fc3f 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000262:	4890      	ldr	r0, [pc, #576]	; (80004a4 <display7SEG+0x358>)
 8000264:	f001 fc39 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800026e:	488d      	ldr	r0, [pc, #564]	; (80004a4 <display7SEG+0x358>)
 8000270:	f001 fc33 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 8000274:	e111      	b.n	800049a <display7SEG+0x34e>
		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	488a      	ldr	r0, [pc, #552]	; (80004a4 <display7SEG+0x358>)
 800027c:	f001 fc2d 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2120      	movs	r1, #32
 8000284:	4887      	ldr	r0, [pc, #540]	; (80004a4 <display7SEG+0x358>)
 8000286:	f001 fc28 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2140      	movs	r1, #64	; 0x40
 800028e:	4885      	ldr	r0, [pc, #532]	; (80004a4 <display7SEG+0x358>)
 8000290:	f001 fc23 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	4882      	ldr	r0, [pc, #520]	; (80004a4 <display7SEG+0x358>)
 800029a:	f001 fc1e 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	487f      	ldr	r0, [pc, #508]	; (80004a4 <display7SEG+0x358>)
 80002a6:	f001 fc18 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b0:	487c      	ldr	r0, [pc, #496]	; (80004a4 <display7SEG+0x358>)
 80002b2:	f001 fc12 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002bc:	4879      	ldr	r0, [pc, #484]	; (80004a4 <display7SEG+0x358>)
 80002be:	f001 fc0c 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 80002c2:	e0ea      	b.n	800049a <display7SEG+0x34e>
		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2110      	movs	r1, #16
 80002c8:	4876      	ldr	r0, [pc, #472]	; (80004a4 <display7SEG+0x358>)
 80002ca:	f001 fc06 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2120      	movs	r1, #32
 80002d2:	4874      	ldr	r0, [pc, #464]	; (80004a4 <display7SEG+0x358>)
 80002d4:	f001 fc01 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2140      	movs	r1, #64	; 0x40
 80002dc:	4871      	ldr	r0, [pc, #452]	; (80004a4 <display7SEG+0x358>)
 80002de:	f001 fbfc 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	486f      	ldr	r0, [pc, #444]	; (80004a4 <display7SEG+0x358>)
 80002e8:	f001 fbf7 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f2:	486c      	ldr	r0, [pc, #432]	; (80004a4 <display7SEG+0x358>)
 80002f4:	f001 fbf1 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002fe:	4869      	ldr	r0, [pc, #420]	; (80004a4 <display7SEG+0x358>)
 8000300:	f001 fbeb 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030a:	4866      	ldr	r0, [pc, #408]	; (80004a4 <display7SEG+0x358>)
 800030c:	f001 fbe5 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 8000310:	e0c3      	b.n	800049a <display7SEG+0x34e>
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2110      	movs	r1, #16
 8000316:	4863      	ldr	r0, [pc, #396]	; (80004a4 <display7SEG+0x358>)
 8000318:	f001 fbdf 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2120      	movs	r1, #32
 8000320:	4860      	ldr	r0, [pc, #384]	; (80004a4 <display7SEG+0x358>)
 8000322:	f001 fbda 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	485e      	ldr	r0, [pc, #376]	; (80004a4 <display7SEG+0x358>)
 800032c:	f001 fbd5 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	485b      	ldr	r0, [pc, #364]	; (80004a4 <display7SEG+0x358>)
 8000336:	f001 fbd0 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4858      	ldr	r0, [pc, #352]	; (80004a4 <display7SEG+0x358>)
 8000342:	f001 fbca 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	4855      	ldr	r0, [pc, #340]	; (80004a4 <display7SEG+0x358>)
 800034e:	f001 fbc4 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	4852      	ldr	r0, [pc, #328]	; (80004a4 <display7SEG+0x358>)
 800035a:	f001 fbbe 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 800035e:	e09c      	b.n	800049a <display7SEG+0x34e>
		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2110      	movs	r1, #16
 8000364:	484f      	ldr	r0, [pc, #316]	; (80004a4 <display7SEG+0x358>)
 8000366:	f001 fbb8 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	2120      	movs	r1, #32
 800036e:	484d      	ldr	r0, [pc, #308]	; (80004a4 <display7SEG+0x358>)
 8000370:	f001 fbb3 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	484a      	ldr	r0, [pc, #296]	; (80004a4 <display7SEG+0x358>)
 800037a:	f001 fbae 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	4848      	ldr	r0, [pc, #288]	; (80004a4 <display7SEG+0x358>)
 8000384:	f001 fba9 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038e:	4845      	ldr	r0, [pc, #276]	; (80004a4 <display7SEG+0x358>)
 8000390:	f001 fba3 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039a:	4842      	ldr	r0, [pc, #264]	; (80004a4 <display7SEG+0x358>)
 800039c:	f001 fb9d 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a6:	483f      	ldr	r0, [pc, #252]	; (80004a4 <display7SEG+0x358>)
 80003a8:	f001 fb97 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 80003ac:	e075      	b.n	800049a <display7SEG+0x34e>
		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	483c      	ldr	r0, [pc, #240]	; (80004a4 <display7SEG+0x358>)
 80003b4:	f001 fb91 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4839      	ldr	r0, [pc, #228]	; (80004a4 <display7SEG+0x358>)
 80003be:	f001 fb8c 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2140      	movs	r1, #64	; 0x40
 80003c6:	4837      	ldr	r0, [pc, #220]	; (80004a4 <display7SEG+0x358>)
 80003c8:	f001 fb87 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	4834      	ldr	r0, [pc, #208]	; (80004a4 <display7SEG+0x358>)
 80003d2:	f001 fb82 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003dc:	4831      	ldr	r0, [pc, #196]	; (80004a4 <display7SEG+0x358>)
 80003de:	f001 fb7c 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e8:	482e      	ldr	r0, [pc, #184]	; (80004a4 <display7SEG+0x358>)
 80003ea:	f001 fb76 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f4:	482b      	ldr	r0, [pc, #172]	; (80004a4 <display7SEG+0x358>)
 80003f6:	f001 fb70 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 80003fa:	e04e      	b.n	800049a <display7SEG+0x34e>
		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2110      	movs	r1, #16
 8000400:	4828      	ldr	r0, [pc, #160]	; (80004a4 <display7SEG+0x358>)
 8000402:	f001 fb6a 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2120      	movs	r1, #32
 800040a:	4826      	ldr	r0, [pc, #152]	; (80004a4 <display7SEG+0x358>)
 800040c:	f001 fb65 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	4823      	ldr	r0, [pc, #140]	; (80004a4 <display7SEG+0x358>)
 8000416:	f001 fb60 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	4821      	ldr	r0, [pc, #132]	; (80004a4 <display7SEG+0x358>)
 8000420:	f001 fb5b 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042a:	481e      	ldr	r0, [pc, #120]	; (80004a4 <display7SEG+0x358>)
 800042c:	f001 fb55 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000436:	481b      	ldr	r0, [pc, #108]	; (80004a4 <display7SEG+0x358>)
 8000438:	f001 fb4f 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	4818      	ldr	r0, [pc, #96]	; (80004a4 <display7SEG+0x358>)
 8000444:	f001 fb49 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 8000448:	e027      	b.n	800049a <display7SEG+0x34e>
		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2110      	movs	r1, #16
 800044e:	4815      	ldr	r0, [pc, #84]	; (80004a4 <display7SEG+0x358>)
 8000450:	f001 fb43 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2120      	movs	r1, #32
 8000458:	4812      	ldr	r0, [pc, #72]	; (80004a4 <display7SEG+0x358>)
 800045a:	f001 fb3e 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	4810      	ldr	r0, [pc, #64]	; (80004a4 <display7SEG+0x358>)
 8000464:	f001 fb39 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <display7SEG+0x358>)
 800046e:	f001 fb34 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	480a      	ldr	r0, [pc, #40]	; (80004a4 <display7SEG+0x358>)
 800047a:	f001 fb2e 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000484:	4807      	ldr	r0, [pc, #28]	; (80004a4 <display7SEG+0x358>)
 8000486:	f001 fb28 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <display7SEG+0x358>)
 8000492:	f001 fb22 	bl	8001ada <HAL_GPIO_WritePin>
			break;
 8000496:	e000      	b.n	800049a <display7SEG+0x34e>
		default:
			break;
 8000498:	bf00      	nop
	}
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <Updatebuffer>:

void Updatebuffer(int time, int light){
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
	if(light == 1){
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d117      	bne.n	80004e8 <Updatebuffer+0x40>
		buffer7SEG[0] = time / 10;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a19      	ldr	r2, [pc, #100]	; (8000520 <Updatebuffer+0x78>)
 80004bc:	fb82 1203 	smull	r1, r2, r2, r3
 80004c0:	1092      	asrs	r2, r2, #2
 80004c2:	17db      	asrs	r3, r3, #31
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <Updatebuffer+0x7c>)
 80004c8:	6013      	str	r3, [r2, #0]
		buffer7SEG[1] = time % 10;
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <Updatebuffer+0x78>)
 80004ce:	fb83 2301 	smull	r2, r3, r3, r1
 80004d2:	109a      	asrs	r2, r3, #2
 80004d4:	17cb      	asrs	r3, r1, #31
 80004d6:	1ad2      	subs	r2, r2, r3
 80004d8:	4613      	mov	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	1aca      	subs	r2, r1, r3
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <Updatebuffer+0x7c>)
 80004e4:	605a      	str	r2, [r3, #4]
	}
	else{
		buffer7SEG[2] = time / 10;
		buffer7SEG[3] = time % 10;
	}
}
 80004e6:	e016      	b.n	8000516 <Updatebuffer+0x6e>
		buffer7SEG[2] = time / 10;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <Updatebuffer+0x78>)
 80004ec:	fb82 1203 	smull	r1, r2, r2, r3
 80004f0:	1092      	asrs	r2, r2, #2
 80004f2:	17db      	asrs	r3, r3, #31
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <Updatebuffer+0x7c>)
 80004f8:	6093      	str	r3, [r2, #8]
		buffer7SEG[3] = time % 10;
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <Updatebuffer+0x78>)
 80004fe:	fb83 2301 	smull	r2, r3, r3, r1
 8000502:	109a      	asrs	r2, r3, #2
 8000504:	17cb      	asrs	r3, r1, #31
 8000506:	1ad2      	subs	r2, r2, r3
 8000508:	4613      	mov	r3, r2
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4413      	add	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	1aca      	subs	r2, r1, r3
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <Updatebuffer+0x7c>)
 8000514:	60da      	str	r2, [r3, #12]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	66666667 	.word	0x66666667
 8000524:	20000070 	.word	0x20000070

08000528 <Update7SEG>:

void Update7SEG(int index){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b03      	cmp	r3, #3
 8000534:	d872      	bhi.n	800061c <Update7SEG+0xf4>
 8000536:	a201      	add	r2, pc, #4	; (adr r2, 800053c <Update7SEG+0x14>)
 8000538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053c:	0800054d 	.word	0x0800054d
 8000540:	08000581 	.word	0x08000581
 8000544:	080005b5 	.word	0x080005b5
 8000548:	080005e9 	.word	0x080005e9
	switch(index){
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4835      	ldr	r0, [pc, #212]	; (8000628 <Update7SEG+0x100>)
 8000552:	f001 fac2 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2102      	movs	r1, #2
 800055a:	4833      	ldr	r0, [pc, #204]	; (8000628 <Update7SEG+0x100>)
 800055c:	f001 fabd 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2104      	movs	r1, #4
 8000564:	4830      	ldr	r0, [pc, #192]	; (8000628 <Update7SEG+0x100>)
 8000566:	f001 fab8 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2108      	movs	r1, #8
 800056e:	482e      	ldr	r0, [pc, #184]	; (8000628 <Update7SEG+0x100>)
 8000570:	f001 fab3 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[0]);
 8000574:	4b2d      	ldr	r3, [pc, #180]	; (800062c <Update7SEG+0x104>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff fde7 	bl	800014c <display7SEG>
			break;
 800057e:	e04e      	b.n	800061e <Update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	4828      	ldr	r0, [pc, #160]	; (8000628 <Update7SEG+0x100>)
 8000586:	f001 faa8 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2102      	movs	r1, #2
 800058e:	4826      	ldr	r0, [pc, #152]	; (8000628 <Update7SEG+0x100>)
 8000590:	f001 faa3 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2104      	movs	r1, #4
 8000598:	4823      	ldr	r0, [pc, #140]	; (8000628 <Update7SEG+0x100>)
 800059a:	f001 fa9e 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2108      	movs	r1, #8
 80005a2:	4821      	ldr	r0, [pc, #132]	; (8000628 <Update7SEG+0x100>)
 80005a4:	f001 fa99 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[1]);
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <Update7SEG+0x104>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fdcd 	bl	800014c <display7SEG>
			break;
 80005b2:	e034      	b.n	800061e <Update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	481b      	ldr	r0, [pc, #108]	; (8000628 <Update7SEG+0x100>)
 80005ba:	f001 fa8e 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2102      	movs	r1, #2
 80005c2:	4819      	ldr	r0, [pc, #100]	; (8000628 <Update7SEG+0x100>)
 80005c4:	f001 fa89 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2104      	movs	r1, #4
 80005cc:	4816      	ldr	r0, [pc, #88]	; (8000628 <Update7SEG+0x100>)
 80005ce:	f001 fa84 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2108      	movs	r1, #8
 80005d6:	4814      	ldr	r0, [pc, #80]	; (8000628 <Update7SEG+0x100>)
 80005d8:	f001 fa7f 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[2]);
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <Update7SEG+0x104>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fdb3 	bl	800014c <display7SEG>
			break;
 80005e6:	e01a      	b.n	800061e <Update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2101      	movs	r1, #1
 80005ec:	480e      	ldr	r0, [pc, #56]	; (8000628 <Update7SEG+0x100>)
 80005ee:	f001 fa74 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2102      	movs	r1, #2
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <Update7SEG+0x100>)
 80005f8:	f001 fa6f 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2104      	movs	r1, #4
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <Update7SEG+0x100>)
 8000602:	f001 fa6a 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2108      	movs	r1, #8
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <Update7SEG+0x100>)
 800060c:	f001 fa65 	bl	8001ada <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[3]);
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <Update7SEG+0x104>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fd99 	bl	800014c <display7SEG>
			break;
 800061a:	e000      	b.n	800061e <Update7SEG+0xf6>
		default:
			break;
 800061c:	bf00      	nop
	}
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40010c00 	.word	0x40010c00
 800062c:	20000070 	.word	0x20000070

08000630 <SystemFSM>:
 *  Created on: Nov 13, 2023
 *      Author: DELL
 */
#include "System_FSM.h"

void SystemFSM(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	switch(status){
 8000634:	4b89      	ldr	r3, [pc, #548]	; (800085c <SystemFSM+0x22c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b04      	cmp	r3, #4
 800063a:	f200 827e 	bhi.w	8000b3a <SystemFSM+0x50a>
 800063e:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <SystemFSM+0x14>)
 8000640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000644:	08000659 	.word	0x08000659
 8000648:	080006bd 	.word	0x080006bd
 800064c:	08000705 	.word	0x08000705
 8000650:	08000891 	.word	0x08000891
 8000654:	080009e7 	.word	0x080009e7
		case INIT:
			if(is_button_pressed(0)){
 8000658:	2000      	movs	r0, #0
 800065a:	f000 fca9 	bl	8000fb0 <is_button_pressed>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <SystemFSM+0x3a>
				button1_press = 1;
 8000664:	4b7e      	ldr	r3, [pc, #504]	; (8000860 <SystemFSM+0x230>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fca0 	bl	8000fb0 <is_button_pressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8263 	bne.w	8000b3e <SystemFSM+0x50e>
 8000678:	4b79      	ldr	r3, [pc, #484]	; (8000860 <SystemFSM+0x230>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	f000 825e 	beq.w	8000b3e <SystemFSM+0x50e>
				status = MODE1_NORMAL;
 8000682:	4b76      	ldr	r3, [pc, #472]	; (800085c <SystemFSM+0x22c>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
				setTimer(100, 0);
 8000688:	2100      	movs	r1, #0
 800068a:	2064      	movs	r0, #100	; 0x64
 800068c:	f000 fe30 	bl	80012f0 <setTimer>
				setTimer(100, 1);
 8000690:	2101      	movs	r1, #1
 8000692:	2064      	movs	r0, #100	; 0x64
 8000694:	f000 fe2c 	bl	80012f0 <setTimer>
				// set default status for traffic light fsm
				TL1 = RED;
 8000698:	4b72      	ldr	r3, [pc, #456]	; (8000864 <SystemFSM+0x234>)
 800069a:	2202      	movs	r2, #2
 800069c:	601a      	str	r2, [r3, #0]
				TL2 = GREEN;
 800069e:	4b72      	ldr	r3, [pc, #456]	; (8000868 <SystemFSM+0x238>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]

				// set default value time for traffic light fsm
				Red1 = redlight;
 80006a4:	4b71      	ldr	r3, [pc, #452]	; (800086c <SystemFSM+0x23c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a71      	ldr	r2, [pc, #452]	; (8000870 <SystemFSM+0x240>)
 80006aa:	6013      	str	r3, [r2, #0]
				Green2 = greenlight;
 80006ac:	4b71      	ldr	r3, [pc, #452]	; (8000874 <SystemFSM+0x244>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a71      	ldr	r2, [pc, #452]	; (8000878 <SystemFSM+0x248>)
 80006b2:	6013      	str	r3, [r2, #0]
				button1_press = 0;
 80006b4:	4b6a      	ldr	r3, [pc, #424]	; (8000860 <SystemFSM+0x230>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
			}
			break;
 80006ba:	e240      	b.n	8000b3e <SystemFSM+0x50e>
		case MODE1_NORMAL:
			TrafficLightFSM1();
 80006bc:	f000 fa5c 	bl	8000b78 <TrafficLightFSM1>
			TrafficLightFSM2();
 80006c0:	f000 fb0e 	bl	8000ce0 <TrafficLightFSM2>
			// press and release
			if(is_button_pressed(0)){
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fc73 	bl	8000fb0 <is_button_pressed>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <SystemFSM+0xa6>
				button1_press = 1;
 80006d0:	4b63      	ldr	r3, [pc, #396]	; (8000860 <SystemFSM+0x230>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fc6a 	bl	8000fb0 <is_button_pressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f040 822f 	bne.w	8000b42 <SystemFSM+0x512>
 80006e4:	4b5e      	ldr	r3, [pc, #376]	; (8000860 <SystemFSM+0x230>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 822a 	beq.w	8000b42 <SystemFSM+0x512>
				status = MODE2_MANRED;
 80006ee:	4b5b      	ldr	r3, [pc, #364]	; (800085c <SystemFSM+0x22c>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
				setTimer(50, 3);
 80006f4:	2103      	movs	r1, #3
 80006f6:	2032      	movs	r0, #50	; 0x32
 80006f8:	f000 fdfa 	bl	80012f0 <setTimer>
				button1_press = 0;
 80006fc:	4b58      	ldr	r3, [pc, #352]	; (8000860 <SystemFSM+0x230>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
			}
			break;
 8000702:	e21e      	b.n	8000b42 <SystemFSM+0x512>
		case MODE2_MANRED:
			// red led blinking 2HZ
			if(flag[3] == 1){
 8000704:	4b5d      	ldr	r3, [pc, #372]	; (800087c <SystemFSM+0x24c>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d10c      	bne.n	8000726 <SystemFSM+0xf6>
				setTimer(50, 3);
 800070c:	2103      	movs	r1, #3
 800070e:	2032      	movs	r0, #50	; 0x32
 8000710:	f000 fdee 	bl	80012f0 <setTimer>
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	485a      	ldr	r0, [pc, #360]	; (8000880 <SystemFSM+0x250>)
 8000718:	f001 f9f7 	bl	8001b0a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 800071c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000720:	4857      	ldr	r0, [pc, #348]	; (8000880 <SystemFSM+0x250>)
 8000722:	f001 f9f2 	bl	8001b0a <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(redlight, 1);
 8000726:	4b51      	ldr	r3, [pc, #324]	; (800086c <SystemFSM+0x23c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2101      	movs	r1, #1
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff febb 	bl	80004a8 <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE2_MANRED, 2);
 8000732:	2102      	movs	r1, #2
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff feb7 	bl	80004a8 <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 800073a:	2001      	movs	r0, #1
 800073c:	f000 fc38 	bl	8000fb0 <is_button_pressed>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <SystemFSM+0x11c>
				button2_press = 1;
 8000746:	4b4f      	ldr	r3, [pc, #316]	; (8000884 <SystemFSM+0x254>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fc2f 	bl	8000fb0 <is_button_pressed>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10b      	bne.n	8000770 <SystemFSM+0x140>
 8000758:	4b4a      	ldr	r3, [pc, #296]	; (8000884 <SystemFSM+0x254>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d007      	beq.n	8000770 <SystemFSM+0x140>
				redlight++;
 8000760:	4b42      	ldr	r3, [pc, #264]	; (800086c <SystemFSM+0x23c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a41      	ldr	r2, [pc, #260]	; (800086c <SystemFSM+0x23c>)
 8000768:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 800076a:	4b46      	ldr	r3, [pc, #280]	; (8000884 <SystemFSM+0x254>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fc37 	bl	8000fe4 <is_button_pressed_1s>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d017      	beq.n	80007ac <SystemFSM+0x17c>
				if(button2_first_press1s){
 800077c:	4b42      	ldr	r3, [pc, #264]	; (8000888 <SystemFSM+0x258>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d006      	beq.n	8000792 <SystemFSM+0x162>
					setTimer(50, 4);
 8000784:	2104      	movs	r1, #4
 8000786:	2032      	movs	r0, #50	; 0x32
 8000788:	f000 fdb2 	bl	80012f0 <setTimer>
					button2_first_press1s = 0;
 800078c:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <SystemFSM+0x258>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 8000792:	4b3a      	ldr	r3, [pc, #232]	; (800087c <SystemFSM+0x24c>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d108      	bne.n	80007ac <SystemFSM+0x17c>
					setTimer(50, 4);
 800079a:	2104      	movs	r1, #4
 800079c:	2032      	movs	r0, #50	; 0x32
 800079e:	f000 fda7 	bl	80012f0 <setTimer>
					redlight++;
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <SystemFSM+0x23c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a30      	ldr	r2, [pc, #192]	; (800086c <SystemFSM+0x23c>)
 80007aa:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 80007ac:	2002      	movs	r0, #2
 80007ae:	f000 fbff 	bl	8000fb0 <is_button_pressed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <SystemFSM+0x18e>
				button3_press = 1;
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <SystemFSM+0x25c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 80007be:	2002      	movs	r0, #2
 80007c0:	f000 fbf6 	bl	8000fb0 <is_button_pressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d11c      	bne.n	8000804 <SystemFSM+0x1d4>
 80007ca:	4b30      	ldr	r3, [pc, #192]	; (800088c <SystemFSM+0x25c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d018      	beq.n	8000804 <SystemFSM+0x1d4>
				status = MODE1_NORMAL;
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemFSM+0x22c>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 80007d8:	2100      	movs	r1, #0
 80007da:	2064      	movs	r0, #100	; 0x64
 80007dc:	f000 fd88 	bl	80012f0 <setTimer>
				setTimer(100, 1);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f000 fd84 	bl	80012f0 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	4824      	ldr	r0, [pc, #144]	; (8000880 <SystemFSM+0x250>)
 80007ee:	f001 f974 	bl	8001ada <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f8:	4821      	ldr	r0, [pc, #132]	; (8000880 <SystemFSM+0x250>)
 80007fa:	f001 f96e 	bl	8001ada <HAL_GPIO_WritePin>
				button3_press = 0;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <SystemFSM+0x25c>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 8000804:	2000      	movs	r0, #0
 8000806:	f000 fbd3 	bl	8000fb0 <is_button_pressed>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d002      	beq.n	8000816 <SystemFSM+0x1e6>
				button1_press = 1;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <SystemFSM+0x230>)
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fbca 	bl	8000fb0 <is_button_pressed>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8191 	bne.w	8000b46 <SystemFSM+0x516>
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <SystemFSM+0x230>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	f000 818c 	beq.w	8000b46 <SystemFSM+0x516>
				status = MODE3_MANYELLOW;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <SystemFSM+0x22c>)
 8000830:	2203      	movs	r2, #3
 8000832:	601a      	str	r2, [r3, #0]
				// set timer for blinking led
				setTimer(50, 3);
 8000834:	2103      	movs	r1, #3
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f000 fd5a 	bl	80012f0 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	480f      	ldr	r0, [pc, #60]	; (8000880 <SystemFSM+0x250>)
 8000842:	f001 f94a 	bl	8001ada <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <SystemFSM+0x250>)
 800084e:	f001 f944 	bl	8001ada <HAL_GPIO_WritePin>
				button1_press = 0;
 8000852:	4b03      	ldr	r3, [pc, #12]	; (8000860 <SystemFSM+0x230>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
			}
			break;
 8000858:	e175      	b.n	8000b46 <SystemFSM+0x516>
 800085a:	bf00      	nop
 800085c:	20000054 	.word	0x20000054
 8000860:	20000048 	.word	0x20000048
 8000864:	20000080 	.word	0x20000080
 8000868:	2000009c 	.word	0x2000009c
 800086c:	20000000 	.word	0x20000000
 8000870:	20000098 	.word	0x20000098
 8000874:	20000004 	.word	0x20000004
 8000878:	20000088 	.word	0x20000088
 800087c:	200000ec 	.word	0x200000ec
 8000880:	40010800 	.word	0x40010800
 8000884:	2000004c 	.word	0x2000004c
 8000888:	2000000c 	.word	0x2000000c
 800088c:	20000050 	.word	0x20000050
		case MODE3_MANYELLOW:
			// red led blinking 2HZ
			if(flag[3] == 1){
 8000890:	4bb0      	ldr	r3, [pc, #704]	; (8000b54 <SystemFSM+0x524>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10c      	bne.n	80008b2 <SystemFSM+0x282>
				setTimer(50, 3);
 8000898:	2103      	movs	r1, #3
 800089a:	2032      	movs	r0, #50	; 0x32
 800089c:	f000 fd28 	bl	80012f0 <setTimer>
				HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 80008a0:	2120      	movs	r1, #32
 80008a2:	48ad      	ldr	r0, [pc, #692]	; (8000b58 <SystemFSM+0x528>)
 80008a4:	f001 f931 	bl	8001b0a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 80008a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ac:	48aa      	ldr	r0, [pc, #680]	; (8000b58 <SystemFSM+0x528>)
 80008ae:	f001 f92c 	bl	8001b0a <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(yellowlight, 1);
 80008b2:	4baa      	ldr	r3, [pc, #680]	; (8000b5c <SystemFSM+0x52c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2101      	movs	r1, #1
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fdf5 	bl	80004a8 <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE3_MANYELLOW, 2);
 80008be:	2102      	movs	r1, #2
 80008c0:	2003      	movs	r0, #3
 80008c2:	f7ff fdf1 	bl	80004a8 <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fb72 	bl	8000fb0 <is_button_pressed>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <SystemFSM+0x2a8>
				button2_press = 1;
 80008d2:	4ba3      	ldr	r3, [pc, #652]	; (8000b60 <SystemFSM+0x530>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 80008d8:	2001      	movs	r0, #1
 80008da:	f000 fb69 	bl	8000fb0 <is_button_pressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d10b      	bne.n	80008fc <SystemFSM+0x2cc>
 80008e4:	4b9e      	ldr	r3, [pc, #632]	; (8000b60 <SystemFSM+0x530>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d007      	beq.n	80008fc <SystemFSM+0x2cc>
				yellowlight++;
 80008ec:	4b9b      	ldr	r3, [pc, #620]	; (8000b5c <SystemFSM+0x52c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a9a      	ldr	r2, [pc, #616]	; (8000b5c <SystemFSM+0x52c>)
 80008f4:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 80008f6:	4b9a      	ldr	r3, [pc, #616]	; (8000b60 <SystemFSM+0x530>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 fb71 	bl	8000fe4 <is_button_pressed_1s>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d017      	beq.n	8000938 <SystemFSM+0x308>
				if(button2_first_press1s){
 8000908:	4b96      	ldr	r3, [pc, #600]	; (8000b64 <SystemFSM+0x534>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <SystemFSM+0x2ee>
					setTimer(50, 4);
 8000910:	2104      	movs	r1, #4
 8000912:	2032      	movs	r0, #50	; 0x32
 8000914:	f000 fcec 	bl	80012f0 <setTimer>
					button2_first_press1s = 0;
 8000918:	4b92      	ldr	r3, [pc, #584]	; (8000b64 <SystemFSM+0x534>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 800091e:	4b8d      	ldr	r3, [pc, #564]	; (8000b54 <SystemFSM+0x524>)
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d108      	bne.n	8000938 <SystemFSM+0x308>
					setTimer(50, 4);
 8000926:	2104      	movs	r1, #4
 8000928:	2032      	movs	r0, #50	; 0x32
 800092a:	f000 fce1 	bl	80012f0 <setTimer>
					yellowlight++;
 800092e:	4b8b      	ldr	r3, [pc, #556]	; (8000b5c <SystemFSM+0x52c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	4a89      	ldr	r2, [pc, #548]	; (8000b5c <SystemFSM+0x52c>)
 8000936:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 8000938:	2002      	movs	r0, #2
 800093a:	f000 fb39 	bl	8000fb0 <is_button_pressed>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <SystemFSM+0x31a>
				button3_press = 1;
 8000944:	4b88      	ldr	r3, [pc, #544]	; (8000b68 <SystemFSM+0x538>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 800094a:	2002      	movs	r0, #2
 800094c:	f000 fb30 	bl	8000fb0 <is_button_pressed>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d11c      	bne.n	8000990 <SystemFSM+0x360>
 8000956:	4b84      	ldr	r3, [pc, #528]	; (8000b68 <SystemFSM+0x538>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d018      	beq.n	8000990 <SystemFSM+0x360>
				status = MODE1_NORMAL;
 800095e:	4b83      	ldr	r3, [pc, #524]	; (8000b6c <SystemFSM+0x53c>)
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000964:	2100      	movs	r1, #0
 8000966:	2064      	movs	r0, #100	; 0x64
 8000968:	f000 fcc2 	bl	80012f0 <setTimer>
				setTimer(100, 1);
 800096c:	2101      	movs	r1, #1
 800096e:	2064      	movs	r0, #100	; 0x64
 8000970:	f000 fcbe 	bl	80012f0 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2120      	movs	r1, #32
 8000978:	4877      	ldr	r0, [pc, #476]	; (8000b58 <SystemFSM+0x528>)
 800097a:	f001 f8ae 	bl	8001ada <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000984:	4874      	ldr	r0, [pc, #464]	; (8000b58 <SystemFSM+0x528>)
 8000986:	f001 f8a8 	bl	8001ada <HAL_GPIO_WritePin>
				button3_press = 0;
 800098a:	4b77      	ldr	r3, [pc, #476]	; (8000b68 <SystemFSM+0x538>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fb0d 	bl	8000fb0 <is_button_pressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <SystemFSM+0x372>
				button1_press = 1;
 800099c:	4b74      	ldr	r3, [pc, #464]	; (8000b70 <SystemFSM+0x540>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 fb04 	bl	8000fb0 <is_button_pressed>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f040 80cd 	bne.w	8000b4a <SystemFSM+0x51a>
 80009b0:	4b6f      	ldr	r3, [pc, #444]	; (8000b70 <SystemFSM+0x540>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80c8 	beq.w	8000b4a <SystemFSM+0x51a>
				status = MODE4_MANGREEN;
 80009ba:	4b6c      	ldr	r3, [pc, #432]	; (8000b6c <SystemFSM+0x53c>)
 80009bc:	2204      	movs	r2, #4
 80009be:	601a      	str	r2, [r3, #0]
				// set timer for blinking led
				setTimer(50, 3);
 80009c0:	2103      	movs	r1, #3
 80009c2:	2032      	movs	r0, #50	; 0x32
 80009c4:	f000 fc94 	bl	80012f0 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2120      	movs	r1, #32
 80009cc:	4862      	ldr	r0, [pc, #392]	; (8000b58 <SystemFSM+0x528>)
 80009ce:	f001 f884 	bl	8001ada <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	485f      	ldr	r0, [pc, #380]	; (8000b58 <SystemFSM+0x528>)
 80009da:	f001 f87e 	bl	8001ada <HAL_GPIO_WritePin>
				button1_press = 0;
 80009de:	4b64      	ldr	r3, [pc, #400]	; (8000b70 <SystemFSM+0x540>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
			}
			break;
 80009e4:	e0b1      	b.n	8000b4a <SystemFSM+0x51a>
		case MODE4_MANGREEN:
			// red led blinking 2HZ
			if(flag[3] == 1){
 80009e6:	4b5b      	ldr	r3, [pc, #364]	; (8000b54 <SystemFSM+0x524>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10b      	bne.n	8000a06 <SystemFSM+0x3d6>
				setTimer(50, 3);
 80009ee:	2103      	movs	r1, #3
 80009f0:	2032      	movs	r0, #50	; 0x32
 80009f2:	f000 fc7d 	bl	80012f0 <setTimer>
				HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 80009f6:	2110      	movs	r1, #16
 80009f8:	4857      	ldr	r0, [pc, #348]	; (8000b58 <SystemFSM+0x528>)
 80009fa:	f001 f886 	bl	8001b0a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	4855      	ldr	r0, [pc, #340]	; (8000b58 <SystemFSM+0x528>)
 8000a02:	f001 f882 	bl	8001b0a <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(greenlight, 1);
 8000a06:	4b5b      	ldr	r3, [pc, #364]	; (8000b74 <SystemFSM+0x544>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fd4b 	bl	80004a8 <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE4_MANGREEN, 2);
 8000a12:	2102      	movs	r1, #2
 8000a14:	2004      	movs	r0, #4
 8000a16:	f7ff fd47 	bl	80004a8 <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fac8 	bl	8000fb0 <is_button_pressed>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <SystemFSM+0x3fc>
				button2_press = 1;
 8000a26:	4b4e      	ldr	r3, [pc, #312]	; (8000b60 <SystemFSM+0x530>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 fabf 	bl	8000fb0 <is_button_pressed>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10b      	bne.n	8000a50 <SystemFSM+0x420>
 8000a38:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <SystemFSM+0x530>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d007      	beq.n	8000a50 <SystemFSM+0x420>
				greenlight++;
 8000a40:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <SystemFSM+0x544>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a4b      	ldr	r2, [pc, #300]	; (8000b74 <SystemFSM+0x544>)
 8000a48:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 8000a4a:	4b45      	ldr	r3, [pc, #276]	; (8000b60 <SystemFSM+0x530>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 fac7 	bl	8000fe4 <is_button_pressed_1s>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d017      	beq.n	8000a8c <SystemFSM+0x45c>
				if(button2_first_press1s){
 8000a5c:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <SystemFSM+0x534>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <SystemFSM+0x442>
					setTimer(50, 4);
 8000a64:	2104      	movs	r1, #4
 8000a66:	2032      	movs	r0, #50	; 0x32
 8000a68:	f000 fc42 	bl	80012f0 <setTimer>
					button2_first_press1s = 0;
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <SystemFSM+0x534>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 8000a72:	4b38      	ldr	r3, [pc, #224]	; (8000b54 <SystemFSM+0x524>)
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d108      	bne.n	8000a8c <SystemFSM+0x45c>
					setTimer(50, 4);
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	2032      	movs	r0, #50	; 0x32
 8000a7e:	f000 fc37 	bl	80012f0 <setTimer>
					greenlight++;
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <SystemFSM+0x544>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <SystemFSM+0x544>)
 8000a8a:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f000 fa8f 	bl	8000fb0 <is_button_pressed>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <SystemFSM+0x46e>
				button3_press = 1;
 8000a98:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <SystemFSM+0x538>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f000 fa86 	bl	8000fb0 <is_button_pressed>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d11b      	bne.n	8000ae2 <SystemFSM+0x4b2>
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <SystemFSM+0x538>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d017      	beq.n	8000ae2 <SystemFSM+0x4b2>
				status = MODE1_NORMAL;
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <SystemFSM+0x53c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2064      	movs	r0, #100	; 0x64
 8000abc:	f000 fc18 	bl	80012f0 <setTimer>
				setTimer(100, 1);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f000 fc14 	bl	80012f0 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	4822      	ldr	r0, [pc, #136]	; (8000b58 <SystemFSM+0x528>)
 8000ace:	f001 f804 	bl	8001ada <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	4820      	ldr	r0, [pc, #128]	; (8000b58 <SystemFSM+0x528>)
 8000ad8:	f000 ffff 	bl	8001ada <HAL_GPIO_WritePin>
				button3_press = 0;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <SystemFSM+0x538>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 fa64 	bl	8000fb0 <is_button_pressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <SystemFSM+0x4c4>
				button1_press = 1;
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <SystemFSM+0x540>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 fa5b 	bl	8000fb0 <is_button_pressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d126      	bne.n	8000b4e <SystemFSM+0x51e>
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <SystemFSM+0x540>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d022      	beq.n	8000b4e <SystemFSM+0x51e>
				status = MODE1_NORMAL;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <SystemFSM+0x53c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f000 fbed 	bl	80012f0 <setTimer>
				setTimer(100, 1);
 8000b16:	2101      	movs	r1, #1
 8000b18:	2064      	movs	r0, #100	; 0x64
 8000b1a:	f000 fbe9 	bl	80012f0 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2110      	movs	r1, #16
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <SystemFSM+0x528>)
 8000b24:	f000 ffd9 	bl	8001ada <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	480a      	ldr	r0, [pc, #40]	; (8000b58 <SystemFSM+0x528>)
 8000b2e:	f000 ffd4 	bl	8001ada <HAL_GPIO_WritePin>
				button1_press = 0;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <SystemFSM+0x540>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b38:	e009      	b.n	8000b4e <SystemFSM+0x51e>
		default:
			break;
 8000b3a:	bf00      	nop
 8000b3c:	e008      	b.n	8000b50 <SystemFSM+0x520>
			break;
 8000b3e:	bf00      	nop
 8000b40:	e006      	b.n	8000b50 <SystemFSM+0x520>
			break;
 8000b42:	bf00      	nop
 8000b44:	e004      	b.n	8000b50 <SystemFSM+0x520>
			break;
 8000b46:	bf00      	nop
 8000b48:	e002      	b.n	8000b50 <SystemFSM+0x520>
			break;
 8000b4a:	bf00      	nop
 8000b4c:	e000      	b.n	8000b50 <SystemFSM+0x520>
			break;
 8000b4e:	bf00      	nop
	}
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000ec 	.word	0x200000ec
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	2000004c 	.word	0x2000004c
 8000b64:	2000000c 	.word	0x2000000c
 8000b68:	20000050 	.word	0x20000050
 8000b6c:	20000054 	.word	0x20000054
 8000b70:	20000048 	.word	0x20000048
 8000b74:	20000004 	.word	0x20000004

08000b78 <TrafficLightFSM1>:
 *      Author: DELL
 */

#include "Traffic_Light_FSM.h"

void TrafficLightFSM1(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	switch(TL1){
 8000b7c:	4b4f      	ldr	r3, [pc, #316]	; (8000cbc <TrafficLightFSM1+0x144>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d007      	beq.n	8000b94 <TrafficLightFSM1+0x1c>
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	f300 808f 	bgt.w	8000ca8 <TrafficLightFSM1+0x130>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d030      	beq.n	8000bf0 <TrafficLightFSM1+0x78>
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d05c      	beq.n	8000c4c <TrafficLightFSM1+0xd4>
					Red1 = redlight;
				}
			}
			break;
		default:
			break;
 8000b92:	e089      	b.n	8000ca8 <TrafficLightFSM1+0x130>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	4849      	ldr	r0, [pc, #292]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000b9a:	f000 ff9e 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4847      	ldr	r0, [pc, #284]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000ba4:	f000 ff99 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2110      	movs	r1, #16
 8000bac:	4844      	ldr	r0, [pc, #272]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000bae:	f000 ff94 	bl	8001ada <HAL_GPIO_WritePin>
			Updatebuffer(Red1, 1);
 8000bb2:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <TrafficLightFSM1+0x14c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fc75 	bl	80004a8 <Updatebuffer>
			if(flag[0] == 1){
 8000bbe:	4b42      	ldr	r3, [pc, #264]	; (8000cc8 <TrafficLightFSM1+0x150>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d172      	bne.n	8000cac <TrafficLightFSM1+0x134>
				setTimer(100, 0);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2064      	movs	r0, #100	; 0x64
 8000bca:	f000 fb91 	bl	80012f0 <setTimer>
				Red1--;
 8000bce:	4b3d      	ldr	r3, [pc, #244]	; (8000cc4 <TrafficLightFSM1+0x14c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	4a3b      	ldr	r2, [pc, #236]	; (8000cc4 <TrafficLightFSM1+0x14c>)
 8000bd6:	6013      	str	r3, [r2, #0]
				if(Red1 < 0){
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <TrafficLightFSM1+0x14c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	da65      	bge.n	8000cac <TrafficLightFSM1+0x134>
					TL1 = GREEN;
 8000be0:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <TrafficLightFSM1+0x144>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
					Green1 = greenlight;
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <TrafficLightFSM1+0x154>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a39      	ldr	r2, [pc, #228]	; (8000cd0 <TrafficLightFSM1+0x158>)
 8000bec:	6013      	str	r3, [r2, #0]
			break;
 8000bee:	e05d      	b.n	8000cac <TrafficLightFSM1+0x134>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	4832      	ldr	r0, [pc, #200]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000bf6:	f000 ff70 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	4830      	ldr	r0, [pc, #192]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000c00:	f000 ff6b 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	482d      	ldr	r0, [pc, #180]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000c0a:	f000 ff66 	bl	8001ada <HAL_GPIO_WritePin>
			Updatebuffer(Green1, 1);
 8000c0e:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <TrafficLightFSM1+0x158>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2101      	movs	r1, #1
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fc47 	bl	80004a8 <Updatebuffer>
			if(flag[0] == 1){
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <TrafficLightFSM1+0x150>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d146      	bne.n	8000cb0 <TrafficLightFSM1+0x138>
				setTimer(100, 0);
 8000c22:	2100      	movs	r1, #0
 8000c24:	2064      	movs	r0, #100	; 0x64
 8000c26:	f000 fb63 	bl	80012f0 <setTimer>
				Green1--;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <TrafficLightFSM1+0x158>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	4a27      	ldr	r2, [pc, #156]	; (8000cd0 <TrafficLightFSM1+0x158>)
 8000c32:	6013      	str	r3, [r2, #0]
				if(Green1 < 0){
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <TrafficLightFSM1+0x158>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da39      	bge.n	8000cb0 <TrafficLightFSM1+0x138>
					TL1 = YELLOW;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <TrafficLightFSM1+0x144>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]
					Yellow1 = yellowlight;
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <TrafficLightFSM1+0x15c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a24      	ldr	r2, [pc, #144]	; (8000cd8 <TrafficLightFSM1+0x160>)
 8000c48:	6013      	str	r3, [r2, #0]
			break;
 8000c4a:	e031      	b.n	8000cb0 <TrafficLightFSM1+0x138>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000c52:	f000 ff42 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000c5c:	f000 ff3d 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2110      	movs	r1, #16
 8000c64:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <TrafficLightFSM1+0x148>)
 8000c66:	f000 ff38 	bl	8001ada <HAL_GPIO_WritePin>
			Updatebuffer(Yellow1, 1);
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <TrafficLightFSM1+0x160>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc19 	bl	80004a8 <Updatebuffer>
			if(flag[0] == 1){
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <TrafficLightFSM1+0x150>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d11a      	bne.n	8000cb4 <TrafficLightFSM1+0x13c>
				setTimer(100, 0);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2064      	movs	r0, #100	; 0x64
 8000c82:	f000 fb35 	bl	80012f0 <setTimer>
				Yellow1--;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <TrafficLightFSM1+0x160>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <TrafficLightFSM1+0x160>)
 8000c8e:	6013      	str	r3, [r2, #0]
				if(Yellow1 < 0){
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <TrafficLightFSM1+0x160>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da0d      	bge.n	8000cb4 <TrafficLightFSM1+0x13c>
					TL1 = RED;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <TrafficLightFSM1+0x144>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	601a      	str	r2, [r3, #0]
					Red1 = redlight;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <TrafficLightFSM1+0x164>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <TrafficLightFSM1+0x14c>)
 8000ca4:	6013      	str	r3, [r2, #0]
			break;
 8000ca6:	e005      	b.n	8000cb4 <TrafficLightFSM1+0x13c>
			break;
 8000ca8:	bf00      	nop
 8000caa:	e004      	b.n	8000cb6 <TrafficLightFSM1+0x13e>
			break;
 8000cac:	bf00      	nop
 8000cae:	e002      	b.n	8000cb6 <TrafficLightFSM1+0x13e>
			break;
 8000cb0:	bf00      	nop
 8000cb2:	e000      	b.n	8000cb6 <TrafficLightFSM1+0x13e>
			break;
 8000cb4:	bf00      	nop
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000080 	.word	0x20000080
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	20000098 	.word	0x20000098
 8000cc8:	200000ec 	.word	0x200000ec
 8000ccc:	20000004 	.word	0x20000004
 8000cd0:	20000084 	.word	0x20000084
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000094 	.word	0x20000094
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <TrafficLightFSM2>:

void TrafficLightFSM2(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	switch(TL2){
 8000ce4:	4b52      	ldr	r3, [pc, #328]	; (8000e30 <TrafficLightFSM2+0x150>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d007      	beq.n	8000cfc <TrafficLightFSM2+0x1c>
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	f300 8095 	bgt.w	8000e1c <TrafficLightFSM2+0x13c>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d032      	beq.n	8000d5c <TrafficLightFSM2+0x7c>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d060      	beq.n	8000dbc <TrafficLightFSM2+0xdc>
					Red2 = redlight;
				}
			}
			break;
		default:
			break;
 8000cfa:	e08f      	b.n	8000e1c <TrafficLightFSM2+0x13c>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d02:	484c      	ldr	r0, [pc, #304]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000d04:	f000 fee9 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	4849      	ldr	r0, [pc, #292]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000d10:	f000 fee3 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	4846      	ldr	r0, [pc, #280]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000d1a:	f000 fede 	bl	8001ada <HAL_GPIO_WritePin>
			Updatebuffer(Red2, 2);
 8000d1e:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <TrafficLightFSM2+0x158>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2102      	movs	r1, #2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fbbf 	bl	80004a8 <Updatebuffer>
			if(flag[1] == 1){
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <TrafficLightFSM2+0x15c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d176      	bne.n	8000e20 <TrafficLightFSM2+0x140>
				setTimer(100, 1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	2064      	movs	r0, #100	; 0x64
 8000d36:	f000 fadb 	bl	80012f0 <setTimer>
				Red2--;
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <TrafficLightFSM2+0x158>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <TrafficLightFSM2+0x158>)
 8000d42:	6013      	str	r3, [r2, #0]
				if(Red2 < 0){
 8000d44:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <TrafficLightFSM2+0x158>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da69      	bge.n	8000e20 <TrafficLightFSM2+0x140>
					TL2 = GREEN;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <TrafficLightFSM2+0x150>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
					Green2 = greenlight;
 8000d52:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <TrafficLightFSM2+0x160>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a3b      	ldr	r2, [pc, #236]	; (8000e44 <TrafficLightFSM2+0x164>)
 8000d58:	6013      	str	r3, [r2, #0]
			break;
 8000d5a:	e061      	b.n	8000e20 <TrafficLightFSM2+0x140>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d62:	4834      	ldr	r0, [pc, #208]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000d64:	f000 feb9 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	4831      	ldr	r0, [pc, #196]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000d70:	f000 feb3 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	482e      	ldr	r0, [pc, #184]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000d7a:	f000 feae 	bl	8001ada <HAL_GPIO_WritePin>
			Updatebuffer(Green2, 2);
 8000d7e:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <TrafficLightFSM2+0x164>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2102      	movs	r1, #2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fb8f 	bl	80004a8 <Updatebuffer>
			if(flag[1] == 1){
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <TrafficLightFSM2+0x15c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d148      	bne.n	8000e24 <TrafficLightFSM2+0x144>
				setTimer(100, 1);
 8000d92:	2101      	movs	r1, #1
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f000 faab 	bl	80012f0 <setTimer>
				Green2--;
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <TrafficLightFSM2+0x164>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	4a28      	ldr	r2, [pc, #160]	; (8000e44 <TrafficLightFSM2+0x164>)
 8000da2:	6013      	str	r3, [r2, #0]
				if(Green2 < 0){
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <TrafficLightFSM2+0x164>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	da3b      	bge.n	8000e24 <TrafficLightFSM2+0x144>
					TL2 = YELLOW;
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <TrafficLightFSM2+0x150>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
					Yellow2 = yellowlight;
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <TrafficLightFSM2+0x168>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <TrafficLightFSM2+0x16c>)
 8000db8:	6013      	str	r3, [r2, #0]
			break;
 8000dba:	e033      	b.n	8000e24 <TrafficLightFSM2+0x144>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc2:	481c      	ldr	r0, [pc, #112]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000dc4:	f000 fe89 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000dd0:	f000 fe83 	bl	8001ada <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <TrafficLightFSM2+0x154>)
 8000dda:	f000 fe7e 	bl	8001ada <HAL_GPIO_WritePin>
			Updatebuffer(Yellow2, 2);
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <TrafficLightFSM2+0x16c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2102      	movs	r1, #2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fb5f 	bl	80004a8 <Updatebuffer>
			if(flag[1] == 1){
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <TrafficLightFSM2+0x15c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d11a      	bne.n	8000e28 <TrafficLightFSM2+0x148>
				setTimer(100, 1);
 8000df2:	2101      	movs	r1, #1
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fa7b 	bl	80012f0 <setTimer>
				Yellow2--;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <TrafficLightFSM2+0x16c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <TrafficLightFSM2+0x16c>)
 8000e02:	6013      	str	r3, [r2, #0]
				if(Yellow2 < 0){
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <TrafficLightFSM2+0x16c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da0d      	bge.n	8000e28 <TrafficLightFSM2+0x148>
					TL2 = RED;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <TrafficLightFSM2+0x150>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	601a      	str	r2, [r3, #0]
					Red2 = redlight;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <TrafficLightFSM2+0x170>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <TrafficLightFSM2+0x158>)
 8000e18:	6013      	str	r3, [r2, #0]
			break;
 8000e1a:	e005      	b.n	8000e28 <TrafficLightFSM2+0x148>
			break;
 8000e1c:	bf00      	nop
 8000e1e:	e004      	b.n	8000e2a <TrafficLightFSM2+0x14a>
			break;
 8000e20:	bf00      	nop
 8000e22:	e002      	b.n	8000e2a <TrafficLightFSM2+0x14a>
			break;
 8000e24:	bf00      	nop
 8000e26:	e000      	b.n	8000e2a <TrafficLightFSM2+0x14a>
			break;
 8000e28:	bf00      	nop
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000009c 	.word	0x2000009c
 8000e34:	40010800 	.word	0x40010800
 8000e38:	2000008c 	.word	0x2000008c
 8000e3c:	200000ec 	.word	0x200000ec
 8000e40:	20000004 	.word	0x20000004
 8000e44:	20000088 	.word	0x20000088
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000090 	.word	0x20000090
 8000e50:	20000000 	.word	0x20000000

08000e54 <InitButtonState>:
	BUTTON_PRESSED_MORE_THAN_1_SECOND
};

enum ButtonState buttonState[3];

void InitButtonState(){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3 ; i++){
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e007      	b.n	8000e70 <InitButtonState+0x1c>
		buttonState[i] = BUTTON_RELEASED;
 8000e60:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <InitButtonState+0x30>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3 ; i++){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	ddf4      	ble.n	8000e60 <InitButtonState+0xc>
	}
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200000a0 	.word	0x200000a0

08000e88 <InitButton>:
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];

static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];


void InitButton(){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i ++){
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	e00e      	b.n	8000eb2 <InitButton+0x2a>
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <InitButton+0x3c>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <InitButton+0x40>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	54d1      	strb	r1, [r2, r3]
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <InitButton+0x44>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i ++){
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d9ed      	bls.n	8000e94 <InitButton+0xc>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	2000005c 	.word	0x2000005c
 8000ec8:	20000060 	.word	0x20000060
 8000ecc:	20000058 	.word	0x20000058

08000ed0 <button_reading>:
void button_reading(unsigned char index){
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	debounceButtonBuffer2[index] = debounceButtonBuffer1[index];
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	492e      	ldr	r1, [pc, #184]	; (8000f98 <button_reading+0xc8>)
 8000ee0:	5c89      	ldrb	r1, [r1, r2]
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <button_reading+0xcc>)
 8000ee4:	54d1      	strb	r1, [r2, r3]
	if(index == 0){
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d109      	bne.n	8000f00 <button_reading+0x30>
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000eec:	79fc      	ldrb	r4, [r7, #7]
 8000eee:	2102      	movs	r1, #2
 8000ef0:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <button_reading+0xd0>)
 8000ef2:	f000 fddb 	bl	8001aac <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <button_reading+0xc8>)
 8000efc:	551a      	strb	r2, [r3, r4]
 8000efe:	e015      	b.n	8000f2c <button_reading+0x5c>
	}
	else if(index == 1){
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d109      	bne.n	8000f1a <button_reading+0x4a>
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 8000f06:	79fc      	ldrb	r4, [r7, #7]
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <button_reading+0xd0>)
 8000f0c:	f000 fdce 	bl	8001aac <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <button_reading+0xc8>)
 8000f16:	551a      	strb	r2, [r3, r4]
 8000f18:	e008      	b.n	8000f2c <button_reading+0x5c>
	}
	else{
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000f1a:	79fc      	ldrb	r4, [r7, #7]
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <button_reading+0xd0>)
 8000f20:	f000 fdc4 	bl	8001aac <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <button_reading+0xc8>)
 8000f2a:	551a      	strb	r2, [r3, r4]
	}

	if(debounceButtonBuffer1[index] == debounceButtonBuffer2[index]){
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <button_reading+0xc8>)
 8000f30:	5cd2      	ldrb	r2, [r2, r3]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4919      	ldr	r1, [pc, #100]	; (8000f9c <button_reading+0xcc>)
 8000f36:	5ccb      	ldrb	r3, [r1, r3]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d128      	bne.n	8000f8e <button_reading+0xbe>
		buttonBuffer[index] = debounceButtonBuffer1[index];
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4915      	ldr	r1, [pc, #84]	; (8000f98 <button_reading+0xc8>)
 8000f42:	5c89      	ldrb	r1, [r1, r2]
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <button_reading+0xd4>)
 8000f46:	54d1      	strb	r1, [r2, r3]
		if(debounceButtonBuffer1[index] == BUTTON_IS_PRESSED){
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <button_reading+0xc8>)
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d114      	bne.n	8000f7c <button_reading+0xac>
			if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <button_reading+0xd8>)
 8000f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f5a:	2b63      	cmp	r3, #99	; 0x63
 8000f5c:	d809      	bhi.n	8000f72 <button_reading+0xa2>
				counterForButtonPress1s[index]++;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <button_reading+0xd8>)
 8000f62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f66:	3201      	adds	r2, #1
 8000f68:	b291      	uxth	r1, r2
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <button_reading+0xd8>)
 8000f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		else{
			counterForButtonPress1s[index] = 0;
			flagForButtonPress1s[index] = 0;
		}
	}
}
 8000f70:	e00d      	b.n	8000f8e <button_reading+0xbe>
				flagForButtonPress1s[index] = 1;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <button_reading+0xdc>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	54d1      	strb	r1, [r2, r3]
}
 8000f7a:	e008      	b.n	8000f8e <button_reading+0xbe>
			counterForButtonPress1s[index] = 0;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <button_reading+0xd8>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[index] = 0;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <button_reading+0xdc>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	54d1      	strb	r1, [r2, r3]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000005c 	.word	0x2000005c
 8000f9c:	20000060 	.word	0x20000060
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	20000058 	.word	0x20000058
 8000fa8:	20000068 	.word	0x20000068
 8000fac:	20000064 	.word	0x20000064

08000fb0 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <is_button_pressed+0x14>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e007      	b.n	8000fd4 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <is_button_pressed+0x30>)
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf0c      	ite	eq
 8000fce:	2301      	moveq	r3, #1
 8000fd0:	2300      	movne	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000058 	.word	0x20000058

08000fe4 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <is_button_pressed_1s+0x14>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e007      	b.n	8001008 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4a06      	ldr	r2, [pc, #24]	; (8001014 <is_button_pressed_1s+0x30>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	bf0c      	ite	eq
 8001002:	2301      	moveq	r3, #1
 8001004:	2300      	movne	r3, #0
 8001006:	b2db      	uxtb	r3, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000064 	.word	0x20000064

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fa5c 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f830 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f8dc 	bl	80011e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001028:	f000 f868 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800102c:	4812      	ldr	r0, [pc, #72]	; (8001078 <main+0x60>)
 800102e:	f001 f9b1 	bl	8002394 <HAL_TIM_Base_Start_IT>

  InitButton();
 8001032:	f7ff ff29 	bl	8000e88 <InitButton>
  InitButtonState();
 8001036:	f7ff ff0d 	bl	8000e54 <InitButtonState>
  setTimer(25, 2);
 800103a:	2102      	movs	r1, #2
 800103c:	2019      	movs	r0, #25
 800103e:	f000 f957 	bl	80012f0 <setTimer>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  SystemFSM();
 8001042:	f7ff faf5 	bl	8000630 <SystemFSM>
//	  fsm_for_input_processing(0);
//	  fsm_for_input_processing(1);
//	  fsm_for_input_processing(2);
	  if(flag[2] == 1){
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <main+0x64>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d1f9      	bne.n	8001042 <main+0x2a>
		  setTimer(25, 2);
 800104e:	2102      	movs	r1, #2
 8001050:	2019      	movs	r0, #25
 8001052:	f000 f94d 	bl	80012f0 <setTimer>
		  Update7SEG(id++);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <main+0x68>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	4908      	ldr	r1, [pc, #32]	; (8001080 <main+0x68>)
 800105e:	600a      	str	r2, [r1, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa61 	bl	8000528 <Update7SEG>
		  if(id >= 4) id = 0;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <main+0x68>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b03      	cmp	r3, #3
 800106c:	dde9      	ble.n	8001042 <main+0x2a>
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <main+0x68>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
	  SystemFSM();
 8001074:	e7e5      	b.n	8001042 <main+0x2a>
 8001076:	bf00      	nop
 8001078:	200000a4 	.word	0x200000a4
 800107c:	200000ec 	.word	0x200000ec
 8001080:	20000044 	.word	0x20000044

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	; 0x40
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2228      	movs	r2, #40	; 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fd3a 	bl	8002b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fd3e 	bl	8001b3c <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010c6:	f000 f90d 	bl	80012e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 ffaa 	bl	800203c <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f8f9 	bl	80012e4 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	; 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <MX_TIM2_Init+0xd0>)
 800111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001120:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <MX_TIM2_Init+0xd0>)
 8001122:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_TIM2_Init+0xd0>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <MX_TIM2_Init+0xd0>)
 8001130:	2209      	movs	r2, #9
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <MX_TIM2_Init+0xd0>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_TIM2_Init+0xd0>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4822      	ldr	r0, [pc, #136]	; (80011cc <MX_TIM2_Init+0xd0>)
 8001142:	f001 f8d7 	bl	80022f4 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800114c:	f000 f8ca 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	481b      	ldr	r0, [pc, #108]	; (80011cc <MX_TIM2_Init+0xd0>)
 800115e:	f001 fa6d 	bl	800263c <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 f8bc 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4814      	ldr	r0, [pc, #80]	; (80011cc <MX_TIM2_Init+0xd0>)
 800117a:	f001 fc39 	bl	80029f0 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f8ae 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  prescaler = htim2.Init.Prescaler;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_TIM2_Init+0xd0>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	461a      	mov	r2, r3
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_TIM2_Init+0xd4>)
 8001190:	601a      	str	r2, [r3, #0]
  period = htim2.Init.Period;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_TIM2_Init+0xd0>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	461a      	mov	r2, r3
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_TIM2_Init+0xd8>)
 800119a:	601a      	str	r2, [r3, #0]
  int frequency = Internalclock / ((1+prescaler)*(1+period));
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_TIM2_Init+0xd4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <MX_TIM2_Init+0xd8>)
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	3201      	adds	r2, #1
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <MX_TIM2_Init+0xdc>)
 80011ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80011b2:	61fb      	str	r3, [r7, #28]
  time_cycle = Onesecond / frequency;
 80011b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80011be:	4a07      	ldr	r2, [pc, #28]	; (80011dc <MX_TIM2_Init+0xe0>)
 80011c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000a4 	.word	0x200000a4
 80011d0:	20000038 	.word	0x20000038
 80011d4:	2000003c 	.word	0x2000003c
 80011d8:	007a1200 	.word	0x007a1200
 80011dc:	20000040 	.word	0x20000040

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_GPIO_Init+0xb8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <MX_GPIO_Init+0xb8>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_GPIO_Init+0xb8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_GPIO_Init+0xb8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a21      	ldr	r2, [pc, #132]	; (8001298 <MX_GPIO_Init+0xb8>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_GPIO_Init+0xb8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green1_Pin|yellow1_Pin|red1_Pin|green2_Pin
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <MX_GPIO_Init+0xbc>)
 800122c:	f000 fc55 	bl	8001ada <HAL_GPIO_WritePin>
                          |yellow2_Pin|red2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|g_Pin
 8001230:	2200      	movs	r2, #0
 8001232:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <MX_GPIO_Init+0xc0>)
 8001238:	f000 fc4f 	bl	8001ada <HAL_GPIO_WritePin>
                          |EN3_Pin|a_Pin|b_Pin|c_Pin
                          |d_Pin|e_Pin|f_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 800123c:	230e      	movs	r3, #14
 800123e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4619      	mov	r1, r3
 800124e:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_GPIO_Init+0xbc>)
 8001250:	f000 fab2 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : green1_Pin yellow1_Pin red1_Pin green2_Pin
                           yellow2_Pin red2_Pin */
  GPIO_InitStruct.Pin = green1_Pin|yellow1_Pin|red1_Pin|green2_Pin
 8001254:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001258:	60bb      	str	r3, [r7, #8]
                          |yellow2_Pin|red2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2302      	movs	r3, #2
 8001264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <MX_GPIO_Init+0xbc>)
 800126e:	f000 faa3 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin g_Pin
                           EN3_Pin a_Pin b_Pin c_Pin
                           d_Pin e_Pin f_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|g_Pin
 8001272:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001276:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|a_Pin|b_Pin|c_Pin
                          |d_Pin|e_Pin|f_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2302      	movs	r3, #2
 8001282:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_GPIO_Init+0xc0>)
 800128c:	f000 fa94 	bl	80017b8 <HAL_GPIO_Init>

}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	// timer run for traffic light 1
	timer_run(0);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 f837 	bl	8001320 <timer_run>
	// timer run for traffic light 2
	timer_run(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f000 f834 	bl	8001320 <timer_run>
	// timer run for quet led
	timer_run(2);
 80012b8:	2002      	movs	r0, #2
 80012ba:	f000 f831 	bl	8001320 <timer_run>
	// timer for blinking led 2HZ
	timer_run(3);
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f82e 	bl	8001320 <timer_run>
	// timer for long press 1s button2
	timer_run(4);
 80012c4:	2004      	movs	r0, #4
 80012c6:	f000 f82b 	bl	8001320 <timer_run>
	// read button 1
	button_reading(0);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fe00 	bl	8000ed0 <button_reading>
	// read button 2
	button_reading(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fdfd 	bl	8000ed0 <button_reading>
	// read button 3
	button_reading(2);
 80012d6:	2002      	movs	r0, #2
 80012d8:	f7ff fdfa 	bl	8000ed0 <button_reading>
	// quet led
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <setTimer>:
#include "software_timer.h"

int count[100];
int flag[100];

void setTimer(int duration, int index){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	flag[index] = 0;
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <setTimer+0x28>)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2100      	movs	r1, #0
 8001300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	count[index] = duration;
 8001304:	4905      	ldr	r1, [pc, #20]	; (800131c <setTimer+0x2c>)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	200000ec 	.word	0x200000ec
 800131c:	2000027c 	.word	0x2000027c

08001320 <timer_run>:

void timer_run(int index){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if(count[index] > 0){
 8001328:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <timer_run+0x48>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd13      	ble.n	800135c <timer_run+0x3c>
		count[index]--;
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <timer_run+0x48>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	490a      	ldr	r1, [pc, #40]	; (8001368 <timer_run+0x48>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(count[index] <= 0){
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <timer_run+0x48>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	2b00      	cmp	r3, #0
 8001350:	dc04      	bgt.n	800135c <timer_run+0x3c>
			flag[index] = 1;
 8001352:	4a06      	ldr	r2, [pc, #24]	; (800136c <timer_run+0x4c>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2101      	movs	r1, #1
 8001358:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	2000027c 	.word	0x2000027c
 800136c:	200000ec 	.word	0x200000ec

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_MspInit+0x5c>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_MspInit+0x5c>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6193      	str	r3, [r2, #24]
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_MspInit+0x5c>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_MspInit+0x5c>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_MspInit+0x5c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_MspInit+0x5c>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_MspInit+0x60>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_MspInit+0x60>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000

080013d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e4:	d113      	bne.n	800140e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_TIM_Base_MspInit+0x44>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_TIM_Base_MspInit+0x44>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_TIM_Base_MspInit+0x44>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	201c      	movs	r0, #28
 8001404:	f000 f9a1 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001408:	201c      	movs	r0, #28
 800140a:	f000 f9ba 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001462:	f000 f87f 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <TIM2_IRQHandler+0x10>)
 8001472:	f000 ffdb 	bl	800242c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000a4 	.word	0x200000a4

08001480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148c:	f7ff fff8 	bl	8001480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001492:	490c      	ldr	r1, [pc, #48]	; (80014c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a8:	4c09      	ldr	r4, [pc, #36]	; (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f001 fb05 	bl	8002ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ba:	f7ff fdad 	bl	8001018 <main>
  bx lr
 80014be:	4770      	bx	lr
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80014c8:	08002b60 	.word	0x08002b60
  ldr r2, =_sbss
 80014cc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80014d0:	20000410 	.word	0x20000410

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x28>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x28>)
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f923 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff ff3c 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40022000 	.word	0x40022000

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f93b 	bl	800179e <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 f903 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000010 	.word	0x20000010
 800155c:	20000018 	.word	0x20000018
 8001560:	20000014 	.word	0x20000014

08001564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x1c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_IncTick+0x20>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <HAL_IncTick+0x20>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000018 	.word	0x20000018
 8001584:	2000040c 	.word	0x2000040c

08001588 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <HAL_GetTick+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	2000040c 	.word	0x2000040c

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4906      	ldr	r1, [pc, #24]	; (8001634 <__NVIC_EnableIRQ+0x34>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff90 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff2d 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff42 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff90 	bl	800168c <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5f 	bl	8001638 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff35 	bl	8001600 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b08b      	sub	sp, #44	; 0x2c
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e148      	b.n	8001a5e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017cc:	2201      	movs	r2, #1
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8137 	bne.w	8001a58 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4aa3      	ldr	r2, [pc, #652]	; (8001a7c <HAL_GPIO_Init+0x2c4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d05e      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 80017f4:	4aa1      	ldr	r2, [pc, #644]	; (8001a7c <HAL_GPIO_Init+0x2c4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d875      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 80017fa:	4aa1      	ldr	r2, [pc, #644]	; (8001a80 <HAL_GPIO_Init+0x2c8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d058      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001800:	4a9f      	ldr	r2, [pc, #636]	; (8001a80 <HAL_GPIO_Init+0x2c8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d86f      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001806:	4a9f      	ldr	r2, [pc, #636]	; (8001a84 <HAL_GPIO_Init+0x2cc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d052      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 800180c:	4a9d      	ldr	r2, [pc, #628]	; (8001a84 <HAL_GPIO_Init+0x2cc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d869      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001812:	4a9d      	ldr	r2, [pc, #628]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d04c      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001818:	4a9b      	ldr	r2, [pc, #620]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d863      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800181e:	4a9b      	ldr	r2, [pc, #620]	; (8001a8c <HAL_GPIO_Init+0x2d4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d046      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001824:	4a99      	ldr	r2, [pc, #612]	; (8001a8c <HAL_GPIO_Init+0x2d4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d85d      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d82a      	bhi.n	8001884 <HAL_GPIO_Init+0xcc>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d859      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <HAL_GPIO_Init+0x80>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	080018b3 	.word	0x080018b3
 800183c:	0800188d 	.word	0x0800188d
 8001840:	0800189f 	.word	0x0800189f
 8001844:	080018e1 	.word	0x080018e1
 8001848:	080018e7 	.word	0x080018e7
 800184c:	080018e7 	.word	0x080018e7
 8001850:	080018e7 	.word	0x080018e7
 8001854:	080018e7 	.word	0x080018e7
 8001858:	080018e7 	.word	0x080018e7
 800185c:	080018e7 	.word	0x080018e7
 8001860:	080018e7 	.word	0x080018e7
 8001864:	080018e7 	.word	0x080018e7
 8001868:	080018e7 	.word	0x080018e7
 800186c:	080018e7 	.word	0x080018e7
 8001870:	080018e7 	.word	0x080018e7
 8001874:	080018e7 	.word	0x080018e7
 8001878:	080018e7 	.word	0x080018e7
 800187c:	08001895 	.word	0x08001895
 8001880:	080018a9 	.word	0x080018a9
 8001884:	4a82      	ldr	r2, [pc, #520]	; (8001a90 <HAL_GPIO_Init+0x2d8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188a:	e02c      	b.n	80018e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e029      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e024      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	3308      	adds	r3, #8
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e01f      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	330c      	adds	r3, #12
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e01a      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ba:	2304      	movs	r3, #4
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e013      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	611a      	str	r2, [r3, #16]
          break;
 80018d2:	e009      	b.n	80018e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	615a      	str	r2, [r3, #20]
          break;
 80018de:	e003      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          break;
 80018e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d801      	bhi.n	80018f2 <HAL_GPIO_Init+0x13a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_Init+0x13e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2bff      	cmp	r3, #255	; 0xff
 80018fc:	d802      	bhi.n	8001904 <HAL_GPIO_Init+0x14c>
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x152>
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	3b08      	subs	r3, #8
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	210f      	movs	r1, #15
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	6a39      	ldr	r1, [r7, #32]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8090 	beq.w	8001a58 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a55      	ldr	r2, [pc, #340]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_GPIO_Init+0x2dc>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001950:	4a51      	ldr	r2, [pc, #324]	; (8001a98 <HAL_GPIO_Init+0x2e0>)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_GPIO_Init+0x2e4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00d      	beq.n	8001998 <HAL_GPIO_Init+0x1e0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x1dc>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a47      	ldr	r2, [pc, #284]	; (8001aa4 <HAL_GPIO_Init+0x2ec>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_GPIO_Init+0x1d8>
 800198c:	2302      	movs	r3, #2
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1e2>
 8001990:	2303      	movs	r3, #3
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1e2>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1e2>
 8001998:	2300      	movs	r3, #0
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019aa:	493b      	ldr	r1, [pc, #236]	; (8001a98 <HAL_GPIO_Init+0x2e0>)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4933      	ldr	r1, [pc, #204]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	492d      	ldr	r1, [pc, #180]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4929      	ldr	r1, [pc, #164]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4923      	ldr	r1, [pc, #140]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	491f      	ldr	r1, [pc, #124]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4919      	ldr	r1, [pc, #100]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4915      	ldr	r1, [pc, #84]	; (8001aa8 <HAL_GPIO_Init+0x2f0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f47f aeaf 	bne.w	80017cc <HAL_GPIO_Init+0x14>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	372c      	adds	r7, #44	; 0x2c
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	10320000 	.word	0x10320000
 8001a80:	10310000 	.word	0x10310000
 8001a84:	10220000 	.word	0x10220000
 8001a88:	10210000 	.word	0x10210000
 8001a8c:	10120000 	.word	0x10120000
 8001a90:	10110000 	.word	0x10110000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e001      	b.n	8001ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	807b      	strh	r3, [r7, #2]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aea:	787b      	ldrb	r3, [r7, #1]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af0:	887a      	ldrh	r2, [r7, #2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af6:	e003      	b.n	8001b00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	041a      	lsls	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	611a      	str	r2, [r3, #16]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b1c:	887a      	ldrh	r2, [r7, #2]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4013      	ands	r3, r2
 8001b22:	041a      	lsls	r2, r3, #16
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e26c      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8087 	beq.w	8001c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5c:	4b92      	ldr	r3, [pc, #584]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b68:	4b8f      	ldr	r3, [pc, #572]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d112      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d10b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x12c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d168      	bne.n	8001c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e246      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x76>
 8001ba4:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a7f      	ldr	r2, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a77      	ldr	r2, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xbc>
 8001bde:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fcb6 	bl	8001588 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fcb2 	bl	8001588 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1fa      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe4>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fca2 	bl	8001588 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fc9e 	bl	8001588 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1e6      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x10c>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c76:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1ba      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4939      	ldr	r1, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fc57 	bl	8001588 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fc53 	bl	8001588 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e19b      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4927      	ldr	r1, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fc36 	bl	8001588 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fc32 	bl	8001588 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e17a      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d019      	beq.n	8001d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff fc16 	bl	8001588 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fc12 	bl	8001588 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e15a      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 fa9a 	bl	80022b8 <RCC_Delay>
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fbfc 	bl	8001588 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	e00f      	b.n	8001db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7ff fbf8 	bl	8001588 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d908      	bls.n	8001db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e140      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	42420000 	.word	0x42420000
 8001db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b9e      	ldr	r3, [pc, #632]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e9      	bne.n	8001d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a6 	beq.w	8001f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b97      	ldr	r3, [pc, #604]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b94      	ldr	r3, [pc, #592]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a93      	ldr	r2, [pc, #588]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b91      	ldr	r3, [pc, #580]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b8e      	ldr	r3, [pc, #568]	; (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b8b      	ldr	r3, [pc, #556]	; (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a8a      	ldr	r2, [pc, #552]	; (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fbb9 	bl	8001588 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff fbb5 	bl	8001588 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	; 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0fd      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b81      	ldr	r3, [pc, #516]	; (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x312>
 8001e40:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a7a      	ldr	r2, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x334>
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	e01c      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x356>
 8001e78:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a6c      	ldr	r2, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a69      	ldr	r2, [pc, #420]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a66      	ldr	r2, [pc, #408]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a63      	ldr	r2, [pc, #396]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fb69 	bl	8001588 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fb65 	bl	8001588 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0ab      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCC_OscConfig+0x37e>
 8001edc:	e014      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb53 	bl	8001588 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff fb4f 	bl	8001588 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e095      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b48      	ldr	r3, [pc, #288]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a47      	ldr	r2, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8081 	beq.w	8002026 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d061      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d146      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <HAL_RCC_OscConfig+0x4fc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fb23 	bl	8001588 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fb1f 	bl	8001588 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e067      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b35      	ldr	r3, [pc, #212]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d108      	bne.n	8001f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	492d      	ldr	r1, [pc, #180]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a19      	ldr	r1, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	430b      	orrs	r3, r1
 8001f92:	4927      	ldr	r1, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x4fc>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff faf3 	bl	8001588 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff faef 	bl	8001588 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e037      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x46a>
 8001fc4:	e02f      	b.n	8002026 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_RCC_OscConfig+0x4fc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fadc 	bl	8001588 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff fad8 	bl	8001588 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e020      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x498>
 8001ff2:	e018      	b.n	8002026 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e013      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	429a      	cmp	r2, r3
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
 8002038:	42420060 	.word	0x42420060

0800203c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0d0      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0207 	bic.w	r2, r3, #7
 8002066:	4965      	ldr	r1, [pc, #404]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b8      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	494d      	ldr	r1, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d040      	beq.n	800215c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d115      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e073      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06b      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4936      	ldr	r1, [pc, #216]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212c:	f7ff fa2c 	bl	8001588 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7ff fa28 	bl	8001588 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e053      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d210      	bcs.n	800218c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4922      	ldr	r1, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e032      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	490e      	ldr	r1, [pc, #56]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ca:	f000 f821 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	490a      	ldr	r1, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	5ccb      	ldrb	r3, [r1, r3]
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1cc>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1d0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f98a 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40022000 	.word	0x40022000
 8002200:	40021000 	.word	0x40021000
 8002204:	08002b34 	.word	0x08002b34
 8002208:	20000010 	.word	0x20000010
 800220c:	20000014 	.word	0x20000014

08002210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b04      	cmp	r3, #4
 8002238:	d002      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x30>
 800223a:	2b08      	cmp	r3, #8
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x36>
 800223e:	e027      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002242:	613b      	str	r3, [r7, #16]
      break;
 8002244:	e027      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	0c9b      	lsrs	r3, r3, #18
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0c5b      	lsrs	r3, r3, #17
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002272:	fb02 f203 	mul.w	r2, r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e004      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	613b      	str	r3, [r7, #16]
      break;
 800228e:	e002      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002292:	613b      	str	r3, [r7, #16]
      break;
 8002294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002296:	693b      	ldr	r3, [r7, #16]
}
 8002298:	4618      	mov	r0, r3
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	007a1200 	.word	0x007a1200
 80022ac:	08002b44 	.word	0x08002b44
 80022b0:	08002b54 	.word	0x08002b54
 80022b4:	003d0900 	.word	0x003d0900

080022b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <RCC_Delay+0x34>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <RCC_Delay+0x38>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0a5b      	lsrs	r3, r3, #9
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d4:	bf00      	nop
  }
  while (Delay --);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	60fa      	str	r2, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f9      	bne.n	80022d4 <RCC_Delay+0x1c>
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000010 	.word	0x20000010
 80022f0:	10624dd3 	.word	0x10624dd3

080022f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e041      	b.n	800238a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff f85a 	bl	80013d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f000 fa6e 	bl	8002814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d001      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e035      	b.n	8002418 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a16      	ldr	r2, [pc, #88]	; (8002424 <HAL_TIM_Base_Start_IT+0x90>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_TIM_Base_Start_IT+0x4e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d6:	d004      	beq.n	80023e2 <HAL_TIM_Base_Start_IT+0x4e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <HAL_TIM_Base_Start_IT+0x94>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d111      	bne.n	8002406 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	d010      	beq.n	8002416 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002404:	e007      	b.n	8002416 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40012c00 	.word	0x40012c00
 8002428:	40000400 	.word	0x40000400

0800242c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d122      	bne.n	8002488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b02      	cmp	r3, #2
 800244e:	d11b      	bne.n	8002488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0202 	mvn.w	r2, #2
 8002458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f9b4 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9a7 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f9b6 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b04      	cmp	r3, #4
 8002494:	d122      	bne.n	80024dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d11b      	bne.n	80024dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0204 	mvn.w	r2, #4
 80024ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f98a 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f97d 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f98c 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d122      	bne.n	8002530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d11b      	bne.n	8002530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0208 	mvn.w	r2, #8
 8002500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2204      	movs	r2, #4
 8002506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f960 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f953 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f962 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b10      	cmp	r3, #16
 800253c:	d122      	bne.n	8002584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b10      	cmp	r3, #16
 800254a:	d11b      	bne.n	8002584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0210 	mvn.w	r2, #16
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2208      	movs	r2, #8
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f936 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f929 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f938 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d10e      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0201 	mvn.w	r2, #1
 80025a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fe7a 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	2b80      	cmp	r3, #128	; 0x80
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa6b 	bl	8002ab2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8fc 	bl	8002800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b20      	cmp	r3, #32
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b20      	cmp	r3, #32
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0220 	mvn.w	r2, #32
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa36 	bl	8002aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_TIM_ConfigClockSource+0x1c>
 8002654:	2302      	movs	r3, #2
 8002656:	e0b4      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x186>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800267e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002690:	d03e      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0xd4>
 8002692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002696:	f200 8087 	bhi.w	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269e:	f000 8086 	beq.w	80027ae <HAL_TIM_ConfigClockSource+0x172>
 80026a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a6:	d87f      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b70      	cmp	r3, #112	; 0x70
 80026aa:	d01a      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0xa6>
 80026ac:	2b70      	cmp	r3, #112	; 0x70
 80026ae:	d87b      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b60      	cmp	r3, #96	; 0x60
 80026b2:	d050      	beq.n	8002756 <HAL_TIM_ConfigClockSource+0x11a>
 80026b4:	2b60      	cmp	r3, #96	; 0x60
 80026b6:	d877      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b50      	cmp	r3, #80	; 0x50
 80026ba:	d03c      	beq.n	8002736 <HAL_TIM_ConfigClockSource+0xfa>
 80026bc:	2b50      	cmp	r3, #80	; 0x50
 80026be:	d873      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d058      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x13a>
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d86f      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b30      	cmp	r3, #48	; 0x30
 80026ca:	d064      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x15a>
 80026cc:	2b30      	cmp	r3, #48	; 0x30
 80026ce:	d86b      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d060      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x15a>
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d867      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05c      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x15a>
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d05a      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x15a>
 80026e0:	e062      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6899      	ldr	r1, [r3, #8]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f000 f95e 	bl	80029b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	609a      	str	r2, [r3, #8]
      break;
 800270e:	e04f      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6899      	ldr	r1, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f000 f947 	bl	80029b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002732:	609a      	str	r2, [r3, #8]
      break;
 8002734:	e03c      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	461a      	mov	r2, r3
 8002744:	f000 f8be 	bl	80028c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2150      	movs	r1, #80	; 0x50
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f915 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002754:	e02c      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	461a      	mov	r2, r3
 8002764:	f000 f8dc 	bl	8002920 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2160      	movs	r1, #96	; 0x60
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f905 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002774:	e01c      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	f000 f89e 	bl	80028c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2140      	movs	r1, #64	; 0x40
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f8f5 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002794:	e00c      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f000 f8ec 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 80027a6:	e003      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e000      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
	...

08002814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <TIM_Base_SetConfig+0xa8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0x28>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0x28>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <TIM_Base_SetConfig+0xac>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <TIM_Base_SetConfig+0xa8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_Base_SetConfig+0x52>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d003      	beq.n	8002866 <TIM_Base_SetConfig+0x52>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <TIM_Base_SetConfig+0xac>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d108      	bne.n	8002878 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a07      	ldr	r2, [pc, #28]	; (80028bc <TIM_Base_SetConfig+0xa8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	615a      	str	r2, [r3, #20]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40000400 	.word	0x40000400

080028c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0201 	bic.w	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 030a 	bic.w	r3, r3, #10
 8002900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f023 0210 	bic.w	r2, r3, #16
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800294a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	031b      	lsls	r3, r3, #12
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800295c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	f043 0307 	orr.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b087      	sub	sp, #28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	021a      	lsls	r2, r3, #8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	609a      	str	r2, [r3, #8]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e041      	b.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d004      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a10      	ldr	r2, [pc, #64]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10c      	bne.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400

08002aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	4d0c      	ldr	r5, [pc, #48]	; (8002afc <__libc_init_array+0x38>)
 8002aca:	4c0d      	ldr	r4, [pc, #52]	; (8002b00 <__libc_init_array+0x3c>)
 8002acc:	1b64      	subs	r4, r4, r5
 8002ace:	10a4      	asrs	r4, r4, #2
 8002ad0:	42a6      	cmp	r6, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	f000 f822 	bl	8002b1c <_init>
 8002ad8:	2600      	movs	r6, #0
 8002ada:	4d0a      	ldr	r5, [pc, #40]	; (8002b04 <__libc_init_array+0x40>)
 8002adc:	4c0a      	ldr	r4, [pc, #40]	; (8002b08 <__libc_init_array+0x44>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	42a6      	cmp	r6, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aec:	4798      	blx	r3
 8002aee:	3601      	adds	r6, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af6:	4798      	blx	r3
 8002af8:	3601      	adds	r6, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	08002b58 	.word	0x08002b58
 8002b00:	08002b58 	.word	0x08002b58
 8002b04:	08002b58 	.word	0x08002b58
 8002b08:	08002b5c 	.word	0x08002b5c

08002b0c <memset>:
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4402      	add	r2, r0
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d100      	bne.n	8002b16 <memset+0xa>
 8002b14:	4770      	bx	lr
 8002b16:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1a:	e7f9      	b.n	8002b10 <memset+0x4>

08002b1c <_init>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr

08002b28 <_fini>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr
